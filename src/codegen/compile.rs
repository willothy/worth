use super::intrinsics::gen_intrinsics;
use super::ops;
use crate::{
    asm, asm_line,
    cli::{CompilerOptions, OutputType},
    codegen::builder::Builder,
    comment,
    error::{
        BoolError, CompileError::*, Error::CompileError, Error::IOError, IOError::NoFileExtension,
    },
    global,
    instruction::*,
    label, segment, syscall,
};

use anyhow::{Context, Result};

pub const BSS_CAPACITY: usize = 640_000;

pub fn compile(program: &Program, opt: CompilerOptions) -> Result<()> {
    let mut asm = Builder::new();
    comment!(asm, "-- generated by the worth compiler --");

    segment!(asm, "bss");

    label!(asm, "mem");
    asm!(asm, ("resb", "{}", BSS_CAPACITY));

    segment!(asm, "text");
    global!(asm, "_start");
    label!(asm, "_start");

    let Program {
        instructions: program,
        name: program_name,
        ..
    } = program;

    for inst in program {
        match &inst {
            Instruction::Push(val) => match val {
                Value::Int(i) => {
                    asm!(asm, ("push", "{}", i))
                }
                Value::Char(c) => {
                    asm!(asm, ("push", "{}", c))
                }
                Value::Ptr(_) => todo!(),
                Value::Str(s) => {
                    let s_id = asm.new_const_str(s);
                    asm!(
                        asm,
                        ("mov", "rax, {}", s.as_bytes().len()),
                        ("push", "rax"),
                        ("mov", "rax, const_str_{}", s_id),
                        ("push", "rax")
                    );
                }
            },
            Instruction::Intrinsic(intrinsic) => {
                comment!(
                    asm,
                    &format!("-- intrinsic: {} --", intrinsic.to_string().to_lowercase())
                );
                intrinsic.compile()(&mut asm);
                comment!(asm, "-- end intrinsic --");
            }
            Instruction::Keyword(Keyword::While { self_ip, .. }) => {
                comment!(asm, "-- while --");
                label!(asm, "addr_{}", self_ip);
            }
            Instruction::Keyword(Keyword::Do { end_ip }) => {
                asm!(
                    asm,
                    ("pop", "rax"),
                    /// While loop condition
                    ("test", "rax, rax"),
                    /// Jump to end of while loop
                    ("jz", "addr_{}", end_ip)
                );
                comment!(asm, "-- do --");
            }
            Instruction::Keyword(Keyword::If { else_ip }) => {
                comment!(asm, "-- if --");
                asm!(
                    asm,
                    ("pop", "rax"),
                    ("test", "rax, rax"),
                    /// Jump to else statement
                    ("jz", "addr_{}", else_ip)
                );
            }
            Instruction::Keyword(Keyword::Else { else_ip, end_ip }) => {
                comment!(asm, "-- else --");
                asm!(
                    asm,
                    /// Jump to end of if statement
                    ("jmp", "addr_{}", end_ip)
                );
                label!(asm, "addr_{}", else_ip);
            }
            Instruction::Keyword(Keyword::End { self_ip, while_ip }) => {
                comment!(asm, "-- end --");
                if let Some(while_ip) = while_ip {
                    asm!(
                        asm,
                        /// Jump to while statement
                        ("jmp", "addr_{}", while_ip)
                    )
                }
                label!(asm, "addr_{}", self_ip);
            }
            Instruction::Op(Op::Add) => ops::add(&mut asm),
            Instruction::Op(Op::Sub) => ops::sub(&mut asm),
            Instruction::Op(Op::Mul) => ops::mul(&mut asm),
            Instruction::Op(Op::Div) => ops::div(&mut asm),
            Instruction::Op(Op::Mod) => ops::rem(&mut asm),
            Instruction::Op(Op::BitwiseAnd) => ops::band(&mut asm),
            Instruction::Op(Op::BitwiseOr) => ops::bor(&mut asm),
            Instruction::Op(Op::BitwiseXor) => ops::xor(&mut asm),
            Instruction::Op(Op::BitwiseNot) => ops::not(&mut asm),
            Instruction::Op(Op::Shl) => ops::shl(&mut asm),
            Instruction::Op(Op::Shr) => ops::shr(&mut asm),
            Instruction::Op(Op::Eq) => ops::eq(&mut asm),
            Instruction::Op(Op::Neq) => ops::neq(&mut asm),
            Instruction::Op(Op::Lt) => ops::lt(&mut asm),
            Instruction::Op(Op::Gt) => ops::gt(&mut asm),
            Instruction::Op(Op::Lte) => ops::lte(&mut asm),
            Instruction::Op(Op::Gte) => ops::gte(&mut asm),
            Instruction::Op(Op::Load) => ops::load(&mut asm),
            Instruction::Op(Op::Store) => ops::store(&mut asm),
            Instruction::Syscall(SyscallKind::Syscall0) => ops::syscall0(&mut asm),
            Instruction::Syscall(SyscallKind::Syscall1) => ops::syscall1(&mut asm),
            Instruction::Syscall(SyscallKind::Syscall2) => ops::syscall2(&mut asm),
            Instruction::Syscall(SyscallKind::Syscall3) => ops::syscall3(&mut asm),
            Instruction::Syscall(SyscallKind::Syscall4) => ops::syscall4(&mut asm),
            Instruction::Syscall(SyscallKind::Syscall5) => ops::syscall5(&mut asm),
            Instruction::Syscall(SyscallKind::Syscall6) => ops::syscall6(&mut asm),
            Instruction::Keyword(Keyword::Macro) => {
                unreachable!("Macro should be expanded before codegen")
            }
            Instruction::Name(name) => {
                unreachable!("Name {} should be expanded before codegen", name)
            }
        }
    }

    syscall!(asm, 60, 0);

    gen_intrinsics(&mut asm);

    // Write asm to out.asm
    let out_path = opt.output.unwrap_or_else(|| program_name.into());
    let output_type = match out_path.extension() {
        Some(ext) => match ext
            .to_str()
            .ok_or(IOError(NoFileExtension))
            .with_context(|| format!("Invalid filename: {}", out_path.to_string_lossy()))?
        {
            "asm" => OutputType::Asm,
            "o" => OutputType::Obj,
            "exe" => OutputType::Exe,
            _ => {
                eprintln!(
                    "Warning: Unknown output type {}. Building elf64 executable.",
                    ext.to_str()
                        .ok_or(IOError(NoFileExtension))
                        .with_context(|| format!(
                            "Invalid filename: {}",
                            out_path.to_string_lossy()
                        ))?
                );
                OutputType::Exe
            }
        },
        None => OutputType::Exe,
    };
    let asm_out_path = out_path.with_extension("asm");
    let asm_out_path_str = asm_out_path
        .with_extension("asm")
        .to_string_lossy()
        .to_string();
    let obj_out_path_str = asm_out_path
        .with_extension("o")
        .to_string_lossy()
        .to_string();
    let exe_out_path_str = asm_out_path
        .with_extension("")
        .to_string_lossy()
        .to_string();

    std::fs::write(&asm_out_path, asm.finalize())
        .with_context(|| format!("Could not write asm to {}", asm_out_path.to_string_lossy()))?;

    if matches!(output_type, OutputType::Asm) {
        return Ok(());
    }

    // Call nasm
    let nasm = std::process::Command::new("nasm")
        .args(&[&asm_out_path_str, "-f", "elf64", "-o", &obj_out_path_str])
        .spawn()
        .map_err(|e| CompileError(NasmInvokeError(e)))
        .with_context(|| format!("Failed to spawn nasm process"))?
        .wait_with_output()
        .map_err(|e| CompileError(NasmInvokeError(e)))
        .with_context(|| format!("Failed to wait for nasm process to complete"))?;

    nasm.status
        .success()
        .to_err()
        .map_err(|_| CompileError(NasmCompileError))
        .with_context(|| {
            format!(
                "Nasm failed to compile {}:\n{}\n",
                asm_out_path_str,
                String::from_utf8_lossy(&nasm.stderr)
            )
        })?;

    if !opt.keep_asm {
        let Ok(_) = std::fs::remove_file(&asm_out_path_str) else {
            eprintln!("Warning: Could not remove asm file {}", asm_out_path_str);
            return Ok(());
        };
    }

    if matches!(output_type, OutputType::Obj) {
        return Ok(());
    }

    // Call ld
    let ld = std::process::Command::new("ld")
        .args(&[&obj_out_path_str, "-o", &exe_out_path_str])
        .spawn()
        .map_err(|e| CompileError(LdInvokeError(e)))
        .with_context(|| format!("Failed to spawn ld process"))?
        .wait_with_output()
        .map_err(|e| CompileError(LdInvokeError(e)))
        .with_context(|| format!("Failed to wait for ld process to complete"))?;

    ld.status
        .success()
        .to_err()
        .map_err(|_| CompileError(LdLinkError))
        .with_context(|| {
            format!(
                "Ld failed to link {}:\n{}\n",
                obj_out_path_str,
                String::from_utf8_lossy(&ld.stderr)
            )
        })?;

    if !opt.keep_obj {
        let Ok(_) = std::fs::remove_file(&obj_out_path_str) else {
            println!("Warning: Could not remove object file {}", obj_out_path_str);
            return Ok(());
        };
    }

    Ok(())
}
