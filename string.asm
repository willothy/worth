segment .bss
    ;; -- generated by the worth compiler --
mem:
    resb    640000

segment .text
global _start
_start:
    mov     rax, 13
    push    rax
    mov     rax, const_str_0
    push    rax
    push    1
    push    1
    ;; -- syscall3 --
    pop     rax                         ;; Syscall number
    pop     rdi
    pop     rsi
    pop     rdx
    syscall
    mov     rax, 14
    push    rax
    mov     rax, const_str_1
    push    rax
    push    1
    push    1
    ;; -- syscall3 --
    pop     rax                         ;; Syscall number
    pop     rdi
    pop     rsi
    pop     rdx
    syscall
    mov     rax, 15
    push    rax
    mov     rax, const_str_2
    push    rax
    push    1
    push    1
    ;; -- syscall3 --
    pop     rax                         ;; Syscall number
    pop     rdi
    pop     rsi
    pop     rdx
    syscall
    mov     rax, 14
    push    rax
    mov     rax, const_str_3
    push    rax
    push    1
    push    1
    ;; -- syscall3 --
    pop     rax                         ;; Syscall number
    pop     rdi
    pop     rsi
    pop     rdx
    syscall
    mov     rax, 15
    push    rax
    mov     rax, const_str_4
    push    rax
    push    1
    push    1
    ;; -- syscall3 --
    pop     rax                         ;; Syscall number
    pop     rdi
    pop     rsi
    pop     rdx
    syscall
    mov     rax, 14
    push    rax
    mov     rax, const_str_5
    push    rax
    push    1
    push    1
    ;; -- syscall3 --
    pop     rax                         ;; Syscall number
    pop     rdi
    pop     rsi
    pop     rdx
    syscall
    ;; -- syscall (1) 60: 60 --
    mov     rax, 60
    mov     rdi, 0
    syscall
intrinsic_dump:
    push    rbp
    mov     rbp, rsp
    sub     rsp, 64
    mov     qword [rbp - 8], rdi
    mov     qword [rbp - 56], 1
    mov     eax, 32
    sub     rax, qword [rbp - 56]
    mov     byte [rbp + rax - 48], 10
.intrinsic_dump_body:
    mov     rax, qword [rbp - 8]
    mov     ecx, 10
    xor     edx, edx
    div     rcx
    add     rdx, 48
    mov     cl, dl
    mov     eax, 32
    sub     rax, qword [rbp - 56]
    sub     rax, 1
    mov     byte [rbp + rax - 48], cl
    mov     rax, qword [rbp - 56]
    add     rax, 1
    mov     qword [rbp - 56], rax
    mov     rax, qword [rbp - 8]
    mov     ecx, 10
    xor     edx, edx
    div     rcx
    mov     qword [rbp - 8], rax
    cmp     qword [rbp - 8], 0
    jne     .intrinsic_dump_body
    mov     eax, 32
    sub     rax, qword [rbp - 56]
    lea     rsi, [rbp - 48]
    add     rsi, rax
    mov     rdx, qword [rbp - 56]
    mov     edi, 1
    mov     rax, 1
    syscall
    add     rsp, 64
    pop     rbp
    ret 

segment .data
const_str_0:
    db      72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33
const_str_1:
    db      72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33, 10
const_str_2:
    db      72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33, 13, 10
const_str_3:
    db      9, 72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33
const_str_4:
    db      34, 72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33, 34
const_str_5:
    db      72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33, 10

