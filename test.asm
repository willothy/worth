;; -- generated by the worth compiler --
segment .text
global _start
_start:
	push    34
	push    35
;; -- add --
	pop     rax
	pop     rbx
	add     rax, rbx
	push    rax
	push    69
;; -- eq --
	mov     rcx, 0
	mov     rdx, 1
	pop     rax
	pop     rbx
	cmp     rax, rbx
	cmove   rcx, rdx
	push    rcx
;; -- if --
	pop     rax
	test    rax, rax
	jz      addr_18
	push    0
;; -- if --
	pop     rax
	test    rax, rax
	jz      addr_10
	push    33
;; -- intrinsic: dump --
	pop     rdi
	call    intrinsic_dump
;; -- end intrinsic --
;; -- else --
	jmp     addr_16
addr_10:
	push    1
;; -- if --
	pop     rax
	test    rax, rax
	jz      addr_15
	push    42
;; -- intrinsic: dump --
	pop     rdi
	call    intrinsic_dump
;; -- end intrinsic --
addr_15:
addr_16:
	push    0
;; -- else --
	jmp     addr_22
addr_18:
	push    420
;; -- intrinsic: dump --
	pop     rdi
	call    intrinsic_dump
;; -- end intrinsic --
	push    1
addr_22:
;; -- intrinsic: dump --
	pop     rdi
	call    intrinsic_dump
;; -- end intrinsic --
	push    0
	pop     rbx
	mov     rax, 60
	mov     rdi, rbx
	syscall
intrinsic_dump:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 64
	mov     qword [rbp - 8], rdi
	mov     qword [rbp - 56], 1
	mov     eax, 32
	sub     rax, qword [rbp - 56]
	mov     byte [rbp + rax - 48], 10
.intrinsic_dump_body:
	mov     rax, qword [rbp - 8]
	mov     ecx, 10
	xor     edx, edx
	div     rcx
	add     rdx, 48
	mov     cl, dl
	mov     eax, 32
	sub     rax, qword [rbp - 56]
	sub     rax, 1
	mov     byte [rbp + rax - 48], cl
	mov     rax, qword [rbp - 56]
	add     rax, 1
	mov     qword [rbp - 56], rax
	mov     rax, qword [rbp - 8]
	mov     ecx, 10
	xor     edx, edx
	div     rcx
	mov     qword [rbp - 8], rax
	cmp     qword [rbp - 8], 0
	jne     .intrinsic_dump_body
	mov     eax, 32
	sub     rax, qword [rbp - 56]
	lea     rsi, [rbp - 48]
	add     rsi, rax
	mov     rdx, qword [rbp - 56]
	mov     edi, 1
	mov     rax, 1
	syscall
	add     rsp, 64
	pop     rbp
	ret