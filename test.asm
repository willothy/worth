    ;; -- generated by the worthc compiler --
segment .bss
mem:
    resb    640000
segment .text
global _start
_start:
    push    1
    push    3
    ;; -- shl --
    pop     rcx
    pop     rax
    shl     rax, cl
    push    rax
    ;; -- intrinsic: dump --
    pop     rdi                         ;; Load argument to rdi
    call    intrinsic_dump
    ;; -- end intrinsic --
    push    32
    push    3
    ;; -- shr --
    pop     rcx
    pop     rax
    shr     rax, cl
    push    rax
    ;; -- intrinsic: dump --
    pop     rdi                         ;; Load argument to rdi
    call    intrinsic_dump
    ;; -- end intrinsic --
    push    1
    push    2
    ;; -- or --
    pop     rax
    pop     rbx
    or      rax, rbx
    push    rax
    ;; -- intrinsic: dump --
    pop     rdi                         ;; Load argument to rdi
    call    intrinsic_dump
    ;; -- end intrinsic --
    push    1
    push    2
    ;; -- and --
    pop     rax
    pop     rbx
    and     rax, rbx
    push    rax
    ;; -- intrinsic: dump --
    pop     rdi                         ;; Load argument to rdi
    call    intrinsic_dump
    ;; -- end intrinsic --
    ;; -- syscall (1) 60: 60 --
    mov     rax, 60
    mov     rdi, 0
    syscall
intrinsic_dump:
    push    rbp
    mov     rbp, rsp
    sub     rsp, 64
    mov     qword [rbp - 8], rdi
    mov     qword [rbp - 56], 1
    mov     eax, 32
    sub     rax, qword [rbp - 56]
    mov     byte [rbp + rax - 48], 10
.intrinsic_dump_body:
    mov     rax, qword [rbp - 8]
    mov     ecx, 10
    xor     edx, edx
    div     rcx
    add     rdx, 48
    mov     cl, dl
    mov     eax, 32
    sub     rax, qword [rbp - 56]
    sub     rax, 1
    mov     byte [rbp + rax - 48], cl
    mov     rax, qword [rbp - 56]
    add     rax, 1
    mov     qword [rbp - 56], rax
    mov     rax, qword [rbp - 8]
    mov     ecx, 10
    xor     edx, edx
    div     rcx
    mov     qword [rbp - 8], rax
    cmp     qword [rbp - 8], 0
    jne     .intrinsic_dump_body
    mov     eax, 32
    sub     rax, qword [rbp - 56]
    lea     rsi, [rbp - 48]
    add     rsi, rax
    mov     rdx, qword [rbp - 56]
    mov     edi, 1
    mov     rax, 1
    syscall
    add     rsp, 64
    pop     rbp
    ret 